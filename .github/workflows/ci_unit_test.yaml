name: ci_unit_test
on:
  workflow_dispatch:
  # pull_request:
  #   types: [ opened, synchronize, reopened ]
  # push:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings

jobs:
  ci_unit_tests:
    name: ci_unit_tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04,windows-2019,macos-10.15]
      fail-fast: true
      max-parallel: 10
    steps: 
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}
      - if: ${{ runner.os == 'Windows' && steps.restore-scoop.outputs.cache-hit != 'true' }}
        run: iex (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
      - if: ${{ runner.os == 'Windows' }}
        run: |
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - if: ${{ runner.os == 'Windows' }}
        run: |
          scoop install git
          scoop bucket add extras
          scoop install llvm yasm
      - name: unit test
        run: |
          echo "unit test"
    env:
      ImageOS:  ${{ matrix.os }}
      BUILD_BUILDID: ${{ github.event.ref }}
  # check_runs:
  #   if: ${{ always() }}
  #   name: check_runs
  #   runs-on: ubuntu-20.04
  #   needs: ci_unit_tests
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: install python requirements
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - run: |
  #       pip install requests
  #       pip install datetime
  #       pip install python-dotenv
  #   - name: Do check suite 
  #     id: check_suit
  #     run: |
  #       python3 ${{ github.workspace }}/devtools/ci/check_runs.py ${{ github.sha }} ${{secrets.WORKFLOW_TOKEN}} > result.log
  #       cat result.log
  #       CI_conclusion=`cat result.log | grep "CI_conclusion" | awk -F ':' '{print $2}'`
  #       required_jobs_count=`cat result.log | grep "required_jobs_count" | awk -F ':' '{print $2}'`
  #       echo "====="
  #       echo $CI_conclusion
  #       echo "::set-output name=CI_conclusion::${CI_conclusion}"
  #       echo "::set-output name=required_jobs_count::${required_jobs_count}"
  #   - name: echo CI_conclusion
  #     if: |
  #        (contains(github.event_name, 'pull_request') || contains('bors[bot]', github.actor)) && 
  #        ${{ steps.check_suit.outputs.CI_conclusion == 'success' }} &&
  #        ${{ steps.check_suit.outputs.required_jobs_count == '4' }}
  #     uses: benc-uk/workflow-dispatch@v1
  #     with:
  #        workflow: ci_dispatch
  #        token: ${{ secrets.WORKFLOW_TOKEN }}
  #       #  inputs: '{ "ref": ${{github.ref}}, "reason": ${{ steps.check_suit.outputs.CI_conclusion }},"conclusion":${{ steps.check_suit.outputs.CI_conclusion }} }'
  #   env:
  #     workspace: ${{ github.workspace }}

        

